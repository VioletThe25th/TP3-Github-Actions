name: CI 

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME} 
  MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
  MONGODB_URI: "mongodb://${MONGODB_USERNAME}:${MONGODB_PASSWORD}@mongo:27017"

jobs:

  build-and-test:
    name: Run unit tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: 16.X

    - name: Install dependencies
      run: yarn install
    - run: yarn test
    - run: yarn build


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{secrets.DOCKER_AUTH_USERNAME}} 
        password: ${{secrets.DOCKER_AUTH_TOKEN}}

    - name: Build and push Docker image
      uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
      with:
        context: ./api
        push: true
        tags: ${{secrets.DOCKER_AUTH_USERNAME}}/monapi:${{github.sha}} 
        file: ./api/Dockerfile

    # services:
    #   # Conteneur MongoDB
    #   mongo:
    #     image: mongo # Correspond à l'image mongo du DockerHub : https://hub.docker.com/_/mongo
    #     volumes:
    #       - db:/data/db # Les données des bases de données de MongoDB sont stockées dans le répertoire /data/db. Il faut donc monter un volume sur cet emplacement. 
    #     ports:
    #       - 27017:27017 # On expose le port de MongoDB afin de le rendre accessible depuis l'host. Cela permettra de s'y connecter avec un client lourd comme Compass.
      
    #   api: # API NodeJS
    #     image: violetgrace/monapi:latest # Image qui a été précédemment construite
    #     ports:
    #       - 3000:3000 # On expose le port 3000 qui correspond au port de l'API afin de la rendre accessible depuis l'host.





